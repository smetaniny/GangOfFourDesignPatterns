@startuml
title Понятие схем

left to right direction

skinparam class {
  FontSize 12
  AttributeFontSize 12
  OperationFontSize 12
}
skinparam note {
  FontSize 12
}
skinparam arrow {
  Thickness 1
}
skinparam padding 10
skinparam linetype ortho
skinparam ranksep 50
skinparam nodesep 30

' -- Унаследование (наследование интерфейсов и классов) --
class Character as "Character (Персонаж)"
class Warrior as "Warrior (Воин)"

Character <|-- Warrior : Наследование
note bottom of Warrior : Наследование показывается стрелочкой с треугольной головкой,\nуказывающей на родительский класс,\nкоторый расширяется дочерним классом.\n\nПример: Класс `Character` (Персонаж) является родительским,\nа класс `Warrior` (Воин) — дочерним. `Warrior` наследует характеристики `Character`.

' -- Реализация интерфейса --
interface Equipable as "Equipable (Экипируемый)"
class Weapon as "Weapon (Оружие)"

Equipable <|.. Weapon : Реализация интерфейса
note bottom of Weapon : Пунктирная стрелочка с треугольной головкой показывает,\nчто класс реализует интерфейс.\n\nПример: Интерфейс `Equipable` (Экипируемый) реализуется классом `Weapon` (Оружие),\nозначая, что `Weapon` предоставляет реализацию метода экипировки, определенного в `Equipable`.

' -- Ассоциация с кратностями --
class User as "User (Пользователь)"
class Role as "Role (Роль)"

User "1" --> "0..*" Role : Ассоциация (кратности)
note bottom of Role : `1`: Один пользователь связан с нулем или более ролями.\n`0..*`: Одна роль может быть связана с нулем или более пользователями.\n\nПример: Пользователь может иметь множество ролей или вовсе не иметь.\nРоль может быть назначена множеству пользователей.

' -- Композиция с кратностями --
class Permission as "Permission (Разрешение)"
class Role as "Role (Роль)"

Role "1..*" *-- "1" Permission : Композиция (кратности)
note bottom of Permission : `1..*`: Одна роль может содержать одно или больше разрешений.\n`1`: Каждое разрешение принадлежит одной роли.\n\nПример: Роль должна иметь хотя бы одно разрешение, но может иметь и больше.\nРазрешение принадлежит только одной роли.

' -- Пример множественных зависимостей --
class Order as "Order (Заказ)"
class Product as "Product (Товар)"

Order "1" --> "1..*" Product : Ассоциация (кратности)
note bottom of Product : `1`: Один заказ содержит один или более продуктов.\n`1..*`: Каждый продукт связан с как минимум одним заказом.\n\nПример: Заказ всегда должен содержать хотя бы один продукт.

class Team as "Team (Команда)"
class Player as "Player (Игрок)"

Team "1" o-- "0..*" Player : Агрегация
note bottom of Player : Агрегация показывает, что объект может существовать отдельно\nот своего владельца.\nПример: Команда может иметь несколько игроков, но игроки могут\nсуществовать без команды.

class Service as "Service (Сервис)"
class Logger as "Logger (Логгер)"

Service ..> Logger : Зависимость
note bottom of Logger : Зависимость показывает, что класс использует другой класс,\nно их жизнь не связана напрямую.\nПример: Класс `Service` может использовать `Logger` для логирования.

' -- Добавление разрывистой линии с незакрашенным кружочком --
class Event as "Event (Событие)"
class Listener as "Listener (Слушатель)"

Event ..o Listener : Зависимость с кружочком
note bottom of Listener : Разрывистая линия с незакрашенным кружочком указывает на слабую связь.\nПример: Событие может иметь слушателя, но его существование не зависит от события.

' -- Добавление разрывистой линии с кружочком и направлением --
class Event2 as "Event2 (Событие)"
class Listener2 as "Listener2 (Слушатель)"

Listener2 o..> Event2 : Зависимость с кружочком и направлением
note bottom of Event2 : Разрывистая линия с незакрашенным кружочком указывает на слабую связь.\nПример: Слушатель слабо связан с событием и не управляет его жизненным циклом.


@enduml
