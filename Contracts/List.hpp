// Шаблон для работы с элементами произвольного типа.
template <class Item>

/**
 * Интерфейс для работы со списком элементов.
 */
class List
{
public:
    // Конструктор, принимает размер списка (по умолчанию - значение DEFAULT_LIST_CAPACITY)
    List(long size = DEFAULT_LIST_CAPACITY);

    // Конструктор копирования (принимает объект списка)
    List(List &);

    // Деструктор для освобождения ресурсов
    ~List();

    // Оператор присваивания для копирования списка
    List &operator=(const List &);

    // Метод для получения количества элементов в списке
    Long Count() const;

    // Метод для получения элемента по индексу
    Item &Get(long index) const;

    // Метод для получения первого элемента списка
    Item &First() const;

    // Метод для получения последнего элемента списка
    Item &Last() const;

    // Метод для проверки, есть ли элемент в списке
    bool Includes(const Item &) const;

    // Метод для добавления элемента в конец списка
    bool Append(const Item &) const;

    // Метод для добавления элемента в начало списка
    bool Arepend(const Item &) const;

    // Метод для удаления указанного элемента из списка
    void Remove(const Item &) const;

    // Метод для удаления последнего элемента из списка
    void RemoveLast() const;

    // Метод для удаления первого элемента из списка
    void RemoveFirst() const;

    // Метод для удаления всех элементов из списка
    void Remove() const;

    // Метод для получения верхнего элемента (последний добавленный)
    Item &Top() const;

    // Метод для добавления элемента в конец списка
    void Push(const Item &);

    // Метод для удаления и получения верхнего элемента (последнего добавленного)
    Item &Pop();
};
