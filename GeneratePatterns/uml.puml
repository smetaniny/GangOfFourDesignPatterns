@startuml
!define AbstractFactory interface
!define Builder interface
!define Singleton class
!define Prototype interface

package GeneratePatterns {
  package Factories {
    abstract class AbstractClothingFactory  {
      + createClothingItem() : ClothingItem
    }

    class MenClothingFactory extends AbstractClothingFactory {
      + createClothingItem() : ClothingItem
    }

    class WomenClothingFactory extends AbstractClothingFactory {
      + createClothingItem() : ClothingItem
    }
  }

  package Builders {
    class SuitBuilder {
      + createJacket() : void
      + createTrousers() : void
      + createVest() : void
      + getResult() : CustomSuit
    }
  }

  package Products {
    interface ClothingItem {
      + getDescription() : string
      + getPrice() : float
    }

    interface ComplexClothingItem extends ClothingItem {
      + getComponents() : list
    }

    class Suit implements ComplexClothingItem {
      + getDescription() : string
      + getPrice() : float
      + getComponents() : list
    }

    class Dress implements ClothingItem {
      + getDescription() : string
      + getPrice() : float
    }

    class CustomSuit implements ComplexClothingItem {
      + getDescription() : string
      + getPrice() : float
      + getComponents() : list
    }
  }

  package Prototypes {
    abstract ClothingPrototype {
      + clone() : ClothingItem
    }

    class SuitPrototype {
      + clone() : Suit
    }

    class DressPrototype extends ClothingPrototype {
      + clone() : Dress
    }

    class PrototypeRegistry {
      + register(ClothingPrototype) : void
      + get(string) : ClothingPrototype
    }

    ClothingPrototype <|.. SuitPrototype
    ClothingPrototype <|.. DressPrototype
  }

  package Singletons {
    Singleton ProductCatalogSingleton {
      + getInstance() : ProductCatalogSingleton
      + addProduct(ClothingItem) : void
      + getProducts() : list
    }
  }

  class GeneratePatternsController {
    + index() : void
    + createProduct() : void
  }

  GeneratePatternsController --> MenClothingFactory
  GeneratePatternsController --> WomenClothingFactory
  GeneratePatternsController --> SuitBuilder
  GeneratePatternsController --> ProductCatalogSingleton
  GeneratePatternsController --> PrototypeRegistry


  MenClothingFactory --> ClothingItem
  WomenClothingFactory --> ClothingItem
  SuitBuilder --> CustomSuit
  ProductCatalogSingleton --> ClothingItem
  PrototypeRegistry --> ClothingPrototype
}
@enduml
